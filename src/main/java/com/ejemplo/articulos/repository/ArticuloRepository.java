package com.ejemplo.articulos.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ejemplo.articulos.model.Articulo;

/**
 * Repositorio para manejar las operaciones de base de datos de los art√≠culos
 * 
 * Esta interfaz es lo que llamamos un "repositorio" o "DAO" (Data Access Object).
 * Se encarga de toda la comunicaci√≥n con la base de datos relacionada con art√≠culos.
 * 
 * Lo genial de Spring Data JPA es que solo necesitamos definir los m√©todos
 * que queremos y √©l se encarga de implementarlos autom√°ticamente.
 * 
 * Al extender JpaRepository<Articulo, Long>, obtenemos gratis m√©todos como:
 * - findAll() para obtener todos los art√≠culos
 * - findById() para buscar por ID
 * - save() para guardar o actualizar
 * - delete() para eliminar
 * - count() para contar registros
 * 
 * @author Sistema de Gesti√≥n de Art√≠culos
 * @version 1.0
 */
@Repository // Le dice a Spring que esta es una clase de acceso a datos
public interface ArticuloRepository extends JpaRepository<Articulo, Long> {

    // ===============================================
    // üöÄ M√âTODOS CRUD INCLUIDOS AUTOM√ÅTICAMENTE
    // ===============================================
    // Estos m√©todos vienen "gratis" al extender JpaRepository:
    //
    // findAll()                -> Lista todos los art√≠culos
    // findById(Long id)        -> Busca uno por ID
    // save(Articulo a)         -> Inserta o actualiza un art√≠culo
    // deleteById(Long id)      -> Elimina por ID
    // count()                  -> Cuenta cu√°ntos art√≠culos hay
    // existsById(Long id)      -> Verifica si existe un art√≠culo con ese ID

    // ===============================================
    // üõ†Ô∏è M√âTODOS PERSONALIZADOS
    // ===============================================
    // Aqu√≠ definimos m√©todos adicionales que necesitamos.
    // Spring Data JPA los implementa autom√°ticamente bas√°ndose en el nombre.

    /**
     * Busca art√≠culos por nombre exacto
     * 
     * @param nombre El nombre exacto del art√≠culo a buscar
     * @return Lista de art√≠culos con ese nombre (normalmente ser√° solo uno por la restricci√≥n unique)
     */
    List<Articulo> findByNombre(String nombre);

    /**
     * Busca art√≠culos cuyo nombre contenga una palabra espec√≠fica
     * 
     * Es √∫til para funcionalidades de b√∫squeda. Por ejemplo, si buscamos "caf√©"
     * encontrar√° art√≠culos como "Caf√© colombiano", "Caf√© con leche", etc.
     * 
     * @param texto El texto que debe estar contenido en el nombre
     * @return Lista de art√≠culos cuyos nombres contienen el texto especificado
     */
    List<Articulo> findByNombreContaining(String texto);

    /**
     * Busca art√≠culos con precio mayor al especificado
     * 
     * √ötil para filtrar art√≠culos caros o establecer rangos de precios.
     * 
     * @param precio El precio m√≠nimo (no incluido)
     * @return Lista de art√≠culos con precio superior al especificado
     */
    List<Articulo> findByPrecioGreaterThan(Double precio);

    /**
     * Busca art√≠culos con precio entre dos valores
     * 
     * Perfecto para filtros de rango de precios en una tienda online.
     * 
     * @param min Precio m√≠nimo (incluido)
     * @param max Precio m√°ximo (incluido)
     * @return Lista de art√≠culos dentro del rango de precios
     */
    List<Articulo> findByPrecioBetween(Double min, Double max);

    /**
     * Busca por nombre ignorando may√∫sculas y min√∫sculas
     * 
     * As√≠ "CAF√â", "caf√©" y "Caf√©" se consideran iguales.
     * 
     * @param nombre El nombre a buscar (sin importar may√∫sculas/min√∫sculas)
     * @return Lista de art√≠culos con ese nombre
     */
    List<Articulo> findByNombreIgnoreCase(String nombre);

    /**
     * Obtiene todos los art√≠culos ordenados por precio de menor a mayor
     * 
     * @return Lista de art√≠culos ordenada por precio ascendente
     */
    List<Articulo> findAllByOrderByPrecioAsc();

    /**
     * Busca art√≠culos por nombre y que tengan precio mayor al especificado
     * 
     * Ejemplo de consulta con m√∫ltiples condiciones.
     * 
     * @param nombre El nombre del art√≠culo
     * @param precio El precio m√≠nimo
     * @return Lista de art√≠culos que cumplen ambas condiciones
     */
    List<Articulo> findByNombreAndPrecioGreaterThan(String nombre, Double precio);
    
    /**
     * Verifica si existe un art√≠culo con el nombre especificado
     * 
     * Este m√©todo es crucial para nuestras validaciones de duplicados.
     * En lugar de cargar el art√≠culo completo, solo pregunta si existe.
     * 
     * @param nombre El nombre a verificar
     * @return true si existe un art√≠culo con ese nombre, false en caso contrario
     */
    boolean existsByNombre(String nombre);
    
    /**
     * Verifica si existe un art√≠culo con el nombre especificado, excluyendo un ID
     * 
     * Esto es perfecto para validaciones durante ediciones.
     * Por ejemplo, si estamos editando el art√≠culo con ID=5 y queremos cambiar
     * su nombre a "Caf√©", este m√©todo verificar√° si ya existe otro art√≠culo
     * (que no sea el ID=5) con el nombre "Caf√©".
     * 
     * @param nombre El nombre a verificar
     * @param id El ID a excluir de la b√∫squeda
     * @return true si existe otro art√≠culo (no el del ID especificado) con ese nombre
     */
    boolean existsByNombreAndIdNot(String nombre, Long id);
}
